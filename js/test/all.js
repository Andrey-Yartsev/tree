// Generated by CoffeeScript 1.11.1
(function() {
  var json, makePreviewContainer, simulateEventFire;

  json = '[{"name":"root","id":1,"children":[{"name":"node1","id":2,"opened":false},{"name":"node2","id":3,"children":[{"name":"node2.1","id":4}]},{"name":"node3","id":5}]}]';

  describe("Tree and nodes core functionality tests", function() {
    it("compares json input and output", function() {
      return expect(new Tree(JSON.parse(json)).json()).toBe(json);
    });
    it("root node loaded with no children", function() {
      return expect(new Tree([
        {
          name: 'a1'
        }
      ]).root.children.length).toBe(0);
    });
    it("root node loaded with 1 child", function() {
      return expect(new Tree([
        {
          name: 'a1',
          children: [
            {
              name: 'a2'
            }
          ]
        }
      ]).root.children.length).toBe(1);
    });
    it("root node has ID=1", function() {
      var tree;
      tree = new Tree([
        {
          name: 'root'
        }
      ]);
      return expect(tree.root.id).toBe(1);
    });
    it("new node creates with next ID=2", function() {
      var tree;
      tree = new Tree([
        {
          name: 'root'
        }
      ]);
      return expect(tree.root.createChild('sub').id).toBe(2);
    });
    it("new node creates with next ID=2 if root node ID is static", function() {
      var tree;
      tree = new Tree([
        {
          name: 'root',
          id: 1
        }
      ]);
      return expect(tree.root.createChild('sub').id).toBe(2);
    });
    it("root node children has changed after node removing", function() {
      var tree;
      tree = new Tree([
        {
          name: 'root',
          children: [
            {
              name: 'a'
            }
          ]
        }
      ]);
      tree.root.children[0]["delete"]();
      return expect(tree.root.children.length).toBe(0);
    });
    return it("tree data has changed after node removing", function() {
      var tree;
      tree = new Tree([
        {
          name: 'root',
          id: 1,
          children: [
            {
              name: 'a'
            }
          ]
        }
      ]);
      tree.root.children[0]["delete"]();
      return expect(tree.json()).toBe('[{"name":"root","id":1}]');
    });
  });

  describe("Storage tests", function() {
    return it("Data has restored successfully after create, update & delete node", function() {
      var treeStored;
      TreeStored.clean('abc');
      treeStored = new TreeStored('abc', new Tree([
        {
          name: 'root'
        }
      ]));
      treeStored.tree.root.createChild('sub');
      treeStored = new TreeStored('abc', new Tree([
        {
          name: 'root'
        }
      ]));
      expect(treeStored.tree.data()[0].children[0].name).toBe('sub');
      treeStored = new TreeStored('abc', new Tree([
        {
          name: 'root'
        }
      ]));
      treeStored.tree.root.children[0].updateName('subNew');
      treeStored = new TreeStored('abc', new Tree([
        {
          name: 'root'
        }
      ]));
      expect(treeStored.tree.data()[0].children[0].name).toBe('subNew');
      treeStored = new TreeStored('abc', new Tree([
        {
          name: 'root'
        }
      ]));
      treeStored.tree.root.children[0]["delete"]();
      treeStored = new TreeStored('abc', new Tree([
        {
          name: 'root'
        }
      ]));
      return expect(treeStored.tree.data()[0].children).toBe(void 0);
    });
  });

  simulateEventFire = function(el, etype) {
    var evObj;
    if (el.fireEvent) {
      return el.fireEvent('on' + etype);
    } else {
      evObj = document.createEvent('Events');
      evObj.initEvent(etype, true, false);
      return el.dispatchEvent(evObj);
    }
  };

  makePreviewContainer = function() {
    var div;
    div = document.createElement('div');
    return div;
  };

  describe("Interface tests", function() {
    it("Has 'opened' class in LI element on node toggle", function() {
      var rootElement, tree;
      tree = new Tree([
        {
          name: 'root',
          children: [
            {
              name: 'a'
            }
          ]
        }
      ]);
      rootElement = tree.render();
      return expect(rootElement.getElementsByTagName('li')[0].className).toBe('hasChildren opened');
    });
    it("No 'opened' class in LI element on node toggle", function() {
      var tree;
      tree = new Tree([
        {
          name: 'root',
          children: [
            {
              name: 'a'
            }
          ]
        }
      ], makePreviewContainer());
      tree.html();
      simulateEventFire(tree.parent.getElementsByTagName('span')[0], 'click');
      return expect(tree.parent.getElementsByTagName('li')[0].className).toBe('hasChildren');
    });
    return it("No 'hasChildren' class in LI element on child delete & no opened on toggle", function() {
      var deleteBtn, li, tree;
      tree = new Tree([
        {
          name: 'root',
          children: [
            {
              name: 'a'
            }
          ]
        }
      ], makePreviewContainer());
      tree.html();
      li = tree.parent.getElementsByTagName('li')[1];
      deleteBtn = li.getElementsByTagName('a')[2];
      simulateEventFire(deleteBtn, 'click');
      expect(tree.parent.getElementsByTagName('li')[0].className).toBe('opened');
      simulateEventFire(tree.parent.getElementsByTagName('span')[0], 'click');
      return expect(tree.parent.getElementsByTagName('li')[0].className).toBe('');
    });
  });

}).call(this);

//# sourceMappingURL=all.js.map
